struct Light
{
    vec3 position;
    float intensity;
    vec3 color;
    int type;

    float innerRadius;
    float outerRadius;

    float innerCutoff;
    float outerCutoff;

    vec2 invertedDirection;
};
uniform Light lights[32];
uniform int lightCount;
uniform int disableLighting;

vec4 calculateLights(vec4 albedo, vec3 normal, vec3 world_pos, vec2 view_pos, float mask)
{
    if (disableLighting == 1)
        return albedo;

    world_pos.z *= 256;

    vec3 light;
    vec3 ambient;
    for (int i = 0; i < lightCount && i < 32; i++)
    {
        vec3 toLight = lights[i].position - world_pos;
        if (lights[i].type == 2)
        {
            ambient += clamp(lights[i].color * lights[i].intensity, 0, 1);
        }
        else
        {       
            vec3 lightDir = normalize(vec3(toLight.xy, toLight.z*2));
            //Diffuse
            float diff = max(dot(normal, lightDir), 0.0);
            vec3 diffuse = vec3(diff, diff, diff);

            //Attenuation
            float r = lights[i].outerRadius;
            float d = length(toLight.xy) - lights[i].innerRadius;
            float attenuation = 1 - d / r;
            if (d > r)
                attenuation = 0;

            if (lights[i].type == 1)
            {
                float angle = dot(normalize(toLight.xy), normalize(lights[i].invertedDirection));
                float difference = lights[i].outerCutoff - lights[i].innerCutoff;
                float cutoffAttenuation = 1 - (angle - lights[i].innerCutoff) / difference;
                attenuation *= max(cutoffAttenuation, 0.0);
            }

            light += diffuse * attenuation * lights[i].intensity * lights[i].color;  
        }
    }

    return albedo * mask * vec4(ambient, 1) + albedo * vec4(light, 1);
}