//Lighting
struct Light
{
    vec3 position;
    float intensity;
    vec3 color;
};
uniform Light lights[32];
uniform int lightCount;
uniform int disableLighting;

vec4 calculateLights(vec4 albedo, vec3 normal, vec3 world_pos, vec2 view_pos)
{
    if (disableLighting == 1)
        return albedo;

    vec3 light;
    for (int i = 0; i < lightCount && i < 32; i++)
    {
        vec3 lightDir = normalize(lights[i].position - world_pos);
        vec3 viewDir = normalize(vec3(view_pos, -256) - world_pos);
        vec3 halfway = normalize(lightDir + viewDir);
        vec3 reflectDir = reflect(-lightDir, normal);

        //Diffuse
        float diff = max(dot(normal, lightDir), 0.0);
        vec3 diffuse = vec3(diff, diff, diff);

        //Attenuation
        float d = length(lights[i].position - world_pos);
        float attenuation = 1.0 / (1.0 + 0.014 * d + 0.000007 * (d * d)); 

        light += diffuse * attenuation * lights[i].intensity * lights[i].color;  
    }
    
    return albedo * 0.1f + albedo * vec4(light, 1);
}