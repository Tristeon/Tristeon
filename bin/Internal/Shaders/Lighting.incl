struct SpotLight
{
    vec3 position;
    float intensity;
    vec3 color;

    float innerRadius;
    float outerRadius;

    float innerCutoff;
    float outerCutoff;

    vec2 invertedDirection;
};

struct PointLight
{
    vec3 position;
    float intensity;
    vec3 color;

    float innerRadius;
    float outerRadius;
};

uniform SpotLight spotLights[32];
uniform int spotLightCount;

uniform PointLight pointLights[32];
uniform int pointLightCount;

uniform vec3 ambientLight;

uniform int disableLighting;

uniform sampler2D compositeLight[8];

vec3 calculateLight(vec3 toLight, vec2 world_pos, vec3 normal, float intensity, vec3 color)
{
    vec3 lightDir = normalize(toLight);

    //Diffuse
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = vec3(diff, diff, diff);

    vec3 light = diffuse * intensity * color;  
    return light;
}

float pointLightAttenuation(vec3 toLight, float outerRadius, float innerRadius)
{    
    float r = outerRadius - innerRadius;
    float d = length(toLight.xy) - innerRadius;
    float attenuation = clamp(1 - d / r, 0, 1);
    if (length(toLight.xy) > outerRadius)
        attenuation = 0;
    return attenuation;
}

float spotLightAttenuation(vec3 toLight, float outerRadius, float innerRadius, vec2 invertedDirection, float outerCutoff, float innerCutoff)
{
    float attenuation = pointLightAttenuation(toLight, outerRadius, innerRadius);

    float angle = dot(normalize(toLight.xy), normalize(invertedDirection));
    
    float cutoffAttenuation;
    float difference = outerCutoff - innerCutoff;
    if (difference == 0)
        cutoffAttenuation =  1 - (angle) / outerCutoff;
    else
        cutoffAttenuation = 1 - (angle - innerCutoff) / difference;
    attenuation *= max(cutoffAttenuation, 0.0);

    return attenuation;
}

vec4 calculateLights(vec4 albedo, vec3 normal, vec2 world_pos, vec2 view_pos, float mask, uvec2 displayPixels, int renderMask)
{
    if (disableLighting == 1)
        return albedo;

    vec3 lights;

    for (int i = 0; i < pointLightCount; i++)
    {
        vec3 lightPos = pointLights[i].position;
        vec3 toLight = lightPos - vec3(world_pos, 0);

        vec3 light = calculateLight(toLight, world_pos, normal, pointLights[i].intensity, pointLights[i].color);
        lights += light * pointLightAttenuation(toLight, pointLights[i].outerRadius, pointLights[i].innerRadius);
    }

    for (int i = 0; i < spotLightCount; i++)
    {
        vec3 lightPos = spotLights[i].position;
        vec3 toLight = lightPos - vec3(world_pos, 0);

        vec3 light = calculateLight(toLight, world_pos, normal, spotLights[i].intensity, spotLights[i].color);
        lights += light * spotLightAttenuation(toLight, spotLights[i].outerRadius, spotLights[i].innerRadius, spotLights[i].invertedDirection, spotLights[i].outerCutoff, spotLights[i].innerCutoff);
    }

    int index = renderMask;
    vec4 composite = texture2D(compositeLight[index], gl_FragCoord.xy / vec2(float(displayPixels.x), float(displayPixels.y)));
    lights += composite.rgb;

    vec3 result = albedo.rgb * ambientLight + albedo.rgb * mask * lights;

    return vec4(result, albedo.a);
}